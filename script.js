// ==UserScript==
// @name Asfixy II
// @namespace http://tampermonkey.net/
// @version 1
// @description Empty... or not :D
// @author jota7zs
// @match        https://orteil.dashnet.org/cookieclicker/
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const WEBHOOK_URL = "";

    function executarAposAtraso(webhookUrl) {
        if (window.ASFIXY_FARM_INSTANCE && typeof window.ASFIXY_FARM_INSTANCE.stop === 'function') {
            window.ASFIXY_FARM_INSTANCE.stop();
        }

        window.ASFIXY_FARM_INSTANCE = (function() {
            'use strict';

            const CONFIG = {
                webhookUrl: webhookUrl,
                initialDelay: 5000,
                reincarnateDelay: 6000,
                exportCycleDelay: 20000,
                maxBuildingId: 19,
                loopInterval: 0,
                version: "II",
                debugMode: false
            };

            function delay(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            let _continuousActionIntervals = [];

            function ascendGame() {
                if (Game && Game.Ascend) {
                    Game.Ascend(1);
                }
            }

            function reincarnateGame() {
                if (Game && Game.Reincarnate) {
                    Game.Reincarnate(1);
                }
            }

            function maximizeResources() {
                if (!Game) return;
                Game.lumps = Infinity;
                Game.cookies = Infinity;
                Game.prestige = Infinity;
            }

            function powerLevelBuildings() {
                if (!Game || !Game.ObjectsById) return;
                if (Game.ObjectsById[0] && Game.ObjectsById[0].levelUp) {
                    Game.ObjectsById[0].levelUp();
                }
                for (let i = 1; i <= CONFIG.maxBuildingId; i++) {
                    if (Game.ObjectsById.hasOwnProperty(i) && Game.ObjectsById[i].levelUp) {
                        Game.ObjectsById[i].levelUp();
                    }
                }
            }

            function unlockAllUpgrades() {
                if (Game && Game.SetAllUpgrades) Game.SetAllUpgrades(1);
            }

            function setStoreToMaxBuy() {
                if (Game && Game.storeBulkButton) Game.storeBulkButton(4);
            }

            function ruinTheFun() {
                if (Game && Game.RuinTheFun) Game.RuinTheFun(1);
            }

            function clickAllProducts() {
                for (let i = 0; i <= CONFIG.maxBuildingId; i++) {
                    const product = document.querySelector("#product" + i);
                    if (product && typeof product.click === 'function') product.click();
                }
            }

            async function exportSaveToDiscord(webhookUrl) {
                Game.toSave = true;
                await delay(100);
                Game.ExportSave();
                await delay(200);

                const textareaPrompt = document.querySelector("#textareaPrompt");
                if (!textareaPrompt || !textareaPrompt.value) {
                    if (Game.ClosePrompt) Game.ClosePrompt();
                    return false;
                }
                const saveData = textareaPrompt.value;
                if (Game.ClosePrompt) Game.ClosePrompt();

                const blob = new Blob([saveData], { type: 'text/plain' });
                const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\..+/, '');
                const fileName = `Asfixy_CookieClicker_Save_${timestamp}.txt`;
                const file = new File([blob], fileName, { type: 'text/plain' });

                const formData = new FormData();
                formData.append('file', file);
                formData.append('username', `Asfixy Farm Bot ${CONFIG.version}`);
                formData.append('content', `馃崻 **New Cookie Clicker Save!** 馃崻\nGenerated by Asfixy Auto Farm ${CONFIG.version} on ${new Date().toLocaleString()}`);

                try {
                    const response = await fetch(webhookUrl, { method: "POST", body: formData });
                    if (response.ok) {
                        return true;
                    } else {
                        return false;
                    }
                } catch (error) {
                    return false;
                }
            }

            async function performHardReset() {
                if (Game && Game.HardReset) {
                    Game.HardReset(2);
                    await delay(100);
                }
            }

            function startContinuousActions() {
                stopContinuousActions();

                let intervalId;
                intervalId = setInterval(() => {
                    maximizeResources();
                    if (Game.ObjectsById[0] && Game.ObjectsById[0].levelUp) Game.ObjectsById[0].levelUp();
                }, CONFIG.loopInterval);
                _continuousActionIntervals.push(intervalId);

                intervalId = setInterval(() => {
                    powerLevelBuildings();
                    unlockAllUpgrades();
                    setStoreToMaxBuy();
                    ruinTheFun();
                    clickAllProducts();
                }, CONFIG.loopInterval);
                _continuousActionIntervals.push(intervalId);
            }

            function stopContinuousActions() {
                if (_continuousActionIntervals.length > 0) {
                    _continuousActionIntervals.forEach(clearInterval);
                    _continuousActionIntervals = [];
                }
            }

            async function mainFarmCycle() {
                if (typeof Game === 'undefined' || !Game.ready) {
                    await delay(5000);
                    if (typeof Game === 'undefined' || !Game.ready) {
                        return;
                    }
                }

                ascendGame();
                await delay(CONFIG.initialDelay);
                startContinuousActions();

                const reincarnateTime = CONFIG.reincarnateDelay - CONFIG.initialDelay;
                if (reincarnateTime > 0) await delay(reincarnateTime);
                reincarnateGame();

                const exportTime = CONFIG.exportCycleDelay - CONFIG.reincarnateDelay;
                if (exportTime > 0) await delay(exportTime);

                stopContinuousActions();
                await delay(500);

                const exportSuccessful = await exportSaveToDiscord(CONFIG.webhookUrl);

                if (exportSuccessful) {
                    await delay(1000);
                    await performHardReset();
                    await delay(1000);
                    if (Game) Game.toSave = true;
                    await delay(2000);
                    location.reload();
                }
            }

            function waitForGame() {
                if (typeof Game !== 'undefined' && Game.ready) {
                    mainFarmCycle().catch(err => {
                        stopContinuousActions();
                    });
                } else {
                    setTimeout(waitForGame, 1000);
                }
            }

            setTimeout(waitForGame, 1500);

            return {
                stop: function() {
                    stopContinuousActions();
                },
                version: CONFIG.version,
                getIntervalCount: function() { return _continuousActionIntervals.length; },
                getConfig: function() { return {...CONFIG}; }
            };
        })();
    }

    window.addEventListener('load', async function() {
        if (window.location.href === 'https://orteil.dashnet.org/cookieclicker/') {
            await new Promise(resolve => setTimeout(resolve, 5000));
            executarAposAtraso(WEBHOOK_URL);
        }
    });
})();
